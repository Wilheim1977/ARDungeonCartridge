mads 2.1.0 build 8 (23 Dec 19)
Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\Ardungeon.asm
     1 				// ****************************************************
     2 				// *                                                  *
     3 				// * Generic BOOT Cartridge routine                   *
     4 				// *                                                  *
     5 				// *     (C) Guillermo Fuenzalida (Willysoft)         *
     6 				// *                                                  *
     7 				// ****************************************************
     8
     9 				//Alternate Reality: The Dungeon Cartridge conversion
    10
    11 				//History:
    12
    13 				//V5: added OPTION key detection. If pressed, then boots the disk.
    14 				//V4: added writing header and character data on flash cartridge. Now it's fully cartridge operational.
    15 				//V3: added format character disk.
    16 				//V2: bug fixes, now the game loads and work. Need floppy disk to save character.
    17 				//V1: initial release. Can load the menu. Game doesn't work.
    18
    19 				// First, we will define the extension as .rom
    20
    21 				;	@com.wudsn.ide.asm.outputfileextension=.rom
    22
    23 				// Now we set no binary headers
    24
    25 					opt h-
    26
    27 				; include files, useful macros:
    28 					icl "../../base/sys_equates.m65"
Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\..\..\base\sys_equates.m65
     1 				;================================================================================
     2 				; System equates, Atari XL + mads [NRV 2009]
     3 				;================================================================================
     4
     5 				;----------------------------------------
     6 				; GTIA:
     7 				;----------------------------------------
     8
     9 = D000			M0PF	= $D000  ; read only
    10 = D001			M1PF	= $D001  ; read only
    11 = D002			M2PF	= $D002  ; read only
    12 = D003			M3PF	= $D003  ; read only
    13
    14 = D004			P0PF	= $D004  ; read only
    15 = D005			P1PF	= $D005  ; read only
    16 = D006			P2PF	= $D006  ; read only
    17 = D007			P3PF	= $D007  ; read only
    18
    19 = D008			M0PL	= $D008  ; read only
    20 = D009			M1PL	= $D009  ; read only
    21 = D00A			M2PL	= $D00A  ; read only
    22 = D00B			M3PL	= $D00B  ; read only
    23
    24 = D00C			P0PL	= $D00C  ; read only
    25 = D00D			P1PL	= $D00D  ; read only
    26 = D00E			P2PL	= $D00E  ; read only
    27 = D00F			P3PL	= $D00F  ; read only
    28
    29 = D010			TRIG0	= $D010  ; read only
    30 = D011			TRIG1	= $D011  ; read only
    31 = D012			TRIG2	= $D012  ; read only
    32 = D013			TRIG3	= $D013  ; read only
    33
    34 = D014			PAL		= $D014  ; read only
    35
    36 				; positions for normal screen: 48 left (+160)--> 208 right (or 32-->224 for wide playfield)
    37 				; 32 top (+192)--> 224 bottom (or 16-->112 for double line resolution)
    38 = D000			HPOSP0	= $D000  ; write only
    39 = D001			HPOSP1	= $D001  ; write only
    40 = D002			HPOSP2	= $D002  ; write only
    41 = D003			HPOSP3	= $D003  ; write only
    42
    43 = D004			HPOSM0	= $D004  ; write only
    44 = D005			HPOSM1	= $D005  ; write only
    45 = D006			HPOSM2	= $D006  ; write only
    46 = D007			HPOSM3	= $D007  ; write only
    47
    48 				; 0 (or 2) normal width, 1 double width, 4 quadruple width
    49 = D008			SIZEP0	= $D008  ; write only
    50 = D009			SIZEP1	= $D009  ; write only
    51 = D00A			SIZEP2	= $D00A  ; write only
    52 = D00B			SIZEP3	= $D00B  ; write only
    53
    54 = D00C			SIZEM	= $D00C  ; write only		// the same 2 bits as the players, but in one byte, in this order: m3m2m1m0
    55
    56 = D00D			GRAFP0	= $D00D  ; write only
    57 = D00E			GRAFP1	= $D00E  ; write only
    58 = D00F			GRAFP2	= $D00F  ; write only
    59 = D010			GRAFP3	= $D010  ; write only
    60
    61 = D011			GRAFM	= $D011  ; write only		// 4 missiles in this order: m3m2m1m0
    62
    63 = D012			COLPM0	= $D012  ; write only
    64 = D013			COLPM1	= $D013  ; write only
    65 = D014			COLPM2	= $D014  ; write only
    66 = D015			COLPM3	= $D015  ; write only
    67
    68 = D016			COLPF0	= $D016  ; write only
    69 = D017			COLPF1	= $D017  ; write only
    70 = D018			COLPF2	= $D018  ; write only
    71 = D019			COLPF3	= $D019  ; write only
    72
    73 = D01A			COLBK	= $D01A  ; write only
    74
    75 = D01B			PRIOR	= $D01B  ; write only
    76 = D01C			VDELAY	= $D01C  ; write only
    77 = D01D			GRACTL	= $D01D  ; write only
    78 = D01E			HITCLR	= $D01E  ; write only
    79
    80 = D01F			CONSOL	= $D01F  ; read and write
    81
    82 				;----------------------------------------
    83 				; POKEY:
    84 				;----------------------------------------
    85
    86 = D200			POT0	= $D200  ; read only
    87 = D201			POT1	= $D201  ; read only
    88 = D202			POT2	= $D202  ; read only
    89 = D203			POT3	= $D203  ; read only
    90 = D204			POT4	= $D204  ; read only
    91 = D205			POT5	= $D205  ; read only
    92 = D206			POT6	= $D206  ; read only
    93 = D207			POT7	= $D207  ; read only
    94
    95 = D208			ALLPOT	= $D208  ; read only
    96
    97 = D209			KBCODE	= $D209  ; read only
    98 = D20A			RANDOM	= $D20A  ; read only
    99
   100 = D20D			SERIN	= $D20D  ; read only
   101 = D20E			IRQST	= $D20E  ; read only
   102 = D20F			SKSTAT	= $D20F  ; read only
   103
   104
   105 = D200			AUDF1	= $D200  ; write only
   106 = D201			AUDC1	= $D201  ; write only
   107 = D202			AUDF2	= $D202  ; write only
   108 = D203			AUDC2	= $D203  ; write only
   109 = D204			AUDF3	= $D204  ; write only
   110 = D205			AUDC3	= $D205  ; write only
   111 = D206			AUDF4	= $D206  ; write only
   112 = D207			AUDC4	= $D207  ; write only
   113
   114 = D208			AUDCTL	= $D208  ; write only
   115
   116 = D209			STIMER	= $D209  ; write only
   117 = D20A			SKREST	= $D20A  ; write only
   118 = D20B			POTGO	= $D20B  ; write only
   119
   120 = D20D			SEROUT	= $D20D  ; write only
   121 = D20E			IRQEN	= $D20E  ; write only
   122 = D20F			SKCTL	= $D20F  ; write only
   123
   124 				;----------------------------------------
   125 				; PIA:
   126 				;----------------------------------------
   127
   128 = D300			PORTA	= $D300  ; read and write
   129 = D301			PORTB	= $D301  ; read and write
   130 = D302			PACTL	= $D302  ; read and write
   131 = D303			PBCTL	= $D303  ; read and write
   132
   133 				;----------------------------------------
   134 				; ANTIC:
   135 				;----------------------------------------
   136
   137 = D40B			VCOUNT	= $D40B  ; read only
   138
   139 = D40C			PENH	= $D40C  ; read only
   140 = D40D			PENV	= $D40D  ; read only
   141
   142 = D40F			NMIST	= $D40F  ; read only
   143
   144
   145 = D400			DMACTL	= $D400  ; write only
   146 = D401			CHACTL	= $D401  ; write only
   147 = D402			DLISTL	= $D402  ; write only
   148 = D403			DLISTH	= $D403  ; write only
   149 = D404			HSCROL	= $D404  ; write only
   150 = D405			VSCROL	= $D405  ; write only
   151 = D407			PMBASE	= $D407  ; write only
   152 = D409			CHBASE	= $D409  ; write only
   153 = D40A			WSYNC	= $D40A  ; write only
   154 = D40E			NMIEN	= $D40E  ; write only
   155 = D40F			NMIRES	= $D40F  ; write only
   156
   157 				;----------------------------------------
   158 				; Shadow registers:
   159 				;----------------------------------------
   160
   161 = 0218			CDTMV1	= $218
   162 = 021A			CDTMV2	= $21a
   163 = 021C			CDTMV3	= $21c
   164 = 021E			CDTMV4	= $21e
   165 = 0220			CDTMV5	= $220
   166
   167
   168 = 022F			SDMCTL	= $22f	; shadow of DMACTL
   169 = 026F			GPRIOR	= $26f	; shadow of PRIOR
   170
   171 = 02C0			PCOLR0	= $2c0	; shadow of COLPM0
   172 = 02C1			PCOLR1  = $2c1
   173 = 02C2			PCOLR2  = $2c2
   174 = 02C3			PCOLR3  = $2c3
   175 = 02C4			COLOR0	= $2c4	; shadow of COLPF0
   176 = 02C5			COLOR1  = $2c5
   177 = 02C6			COLOR2  = $2c6
   178 = 02C7			COLOR3  = $2c7
   179 = 02C8			COLOR4  = $2c8
   180
   181 = 02E0			RUNAD	= $2e0
   182 = 02E2			INITAD	= $2e2
   183
   184 = 0014			RTCLOCK	= $14
   185 = 0041			SOUNDR	= $41
   186 = 0042			CRITIC	= $42
   187 = 004D			ATRACT	= 77
   188
   189 = 0052			LMARGN = $52
   190 = 0053			RMARGN = $53
   191 = 0062			PALNTS = $62
   192 = 006A			RAMTOP = $6A
   193
   194 = 02F4			CHBAS	= $2F4	; shadow of CHBASE
   195 = 02FC			CH	= $2FC
   196 = 02F3			CHACT	= $2F3  ; 
   197
   198 = 0340			ICHID = $340
   199 = 0341			ICDNO = $341
   200 = 0342			ICCMD = $342
   201 = 0343			ICSTA = $343
   202 = 0344			ICBAL = $344
   203 = 0345			ICBAH = $345
   204 = 0346			ICPTL = $346
   205 = 0347			ICPTH = $347
   206 = 0348			ICBLL = $348
   207 = 0349			ICBLH = $349
   208 = 034A			ICAX1 = $34A
   209 = 034B			ICAX2 = $34B
   210
   211 = 03F8			BASICF  = $3f8
   212 = 03FA			GINTLK  = $3fa
   213
   214
   215 = 0230			SDLSTL	= $230	; display list address
   216 = 0200			VDSLST	= $200	; DLI address
   217
   218 = 0301			DUNIT	= $301
   219 = 0302			DCOMND	= $302
   220 = 0303			DSTATS	= $303
   221 = 0304			DBUFLO	= $304
   222 = 0305			DBUFHI	= $305
   223
   224 = 030A			DAUX1	= $30A
   225 = 030B			DAUX2	= $30B
   226
   227
   228 = 0270			PADDL0	= 624	; 0-228 , shadow of POT0
   229 = 027C			PTRIG0	= 636	; 0 = PRESSED , shadow of PTRG0
   230 = 0278			STICK0	= 632	; 0000 = RLDU , shadow of PORTA
   231 = 0284			STRIG0	= 644	; 0 = PRESSED , shadow of TRIG0
   232
   233 = 0244			COLDST	= $244	; non zero --> do a cold start when pressing the reset key
   234
   235 				;----------------------------------------
   236 				; VBI:
   237 				;----------------------------------------
   238
   239 = E45C			SETVBV			= $E45C
   240 = E45F			XITVB_I			= $E45F
   241 = E45F			SYSVBV			= $E45F
   242 = E462			XITVB_D			= $E462
   243 = E462			XITVBV			= $E462
   244 = 0006			VBI_I			= 6
   245 = 0007			VBI_D			= 7
   246 = C0E2			NORMAL_VBI_I	= 49378
   247 = C28A			NORMAL_VBI_D	= 49802
   248 = 0222			VVBLKI			= 546
   249 = 0224			VVBLKD			= 548
   250 = E462			XITVB			= XITVB_D
   251
   252 				;----------------------------------------
   253 				; Handler vectors:
   254 				;----------------------------------------
   255
   256 = FFFA			NMIH_VECTOR		= 65530
   257 = FFFC			RESH_VECTOR		= 65532
   258 = FFFE			IRQH_VECTOR		= 65534
   259
   260 				;----------------------------------------
   261 				; I/O:
   262 				;----------------------------------------
   263
   264 = E456			CIOV			= $E456	; (58454)
   265 = E459			SIOV			= $E459	; (58457)
   266
   267 				;----------------------------------------
   268 				; Restart routines
   269 				;----------------------------------------
   270
   271 = E474			WARMSV			= $E474
   272 = E477			COLDSV			= $E477
   273
   274 				;----------------------------------------
   275 				; Bit values:
   276 				;----------------------------------------
   277
   278 				; DMA values
   279 = 0020			DV_DMA_ON			= %00100000
   280 = 0010			DV_PM_ONE_LINE		= %00010000
   281 = 0008			DV_PLAYERS_ON		= %00001000
   282 = 0004			DV_MISSILES_ON		= %00000100
   283 = 0003			DV_WIDE_PF			= %00000011
   284 = 0002			DV_NORMAL_PF		= %00000010
   285 = 0001			DV_NARROW_PF		= %00000001
   286
   287 				; Display list values
   288 = 0080			DL_DLI_MASK		= %10000000
   289 = 0040			DL_LMS_MASK		= %01000000
   290 = 0020			DL_VSCROLL_MASK	= %00100000
   291 = 0010			DL_HSCROLL_MASK	= %00010000
   292
   293 = 0001			DL_JMP		= 1
   294 = 0041			DL_JVB		= 65
   295
   296 = 0000			DL_BLANK_1	= 0
   297 = 0010			DL_BLANK_2	= 16
   298 = 0020			DL_BLANK_3	= 32
   299 = 0030			DL_BLANK_4	= 48
   300 = 0040			DL_BLANK_5	= 64
   301 = 0050			DL_BLANK_6	= 80
   302 = 0060			DL_BLANK_7	= 96
   303 = 0070			DL_BLANK_8	= 112
   304
   305 				; Antic graphic modes
   306 = 0002			GM_CHAR_A2	= 2			; 2 colors, 40x24, 960b, 40xline, 8 scanlines
   307 = 0006			GM_CHAR_A6	= 6			; 4 colors, 20x24, 480b, 40xline, 8 scanlines
   308 = 0007			GM_CHAR_A7	= 7			; 4 colors, 20x12, 240b, 20xline, 16 scanlines
   309 = 0004			GM_CHAR_A4	= 4			; 5 colors, 40x24, 960b, 40xline, 8 scanlines
   310 = 0005			GM_CHAR_A5	= 5			; 5 colors, 40x12, 480b, 40xline, 16 scanlines
   311 = 0003			GM_CHAR_A3	= 3			; 2 colors, 40x24, 760b, 40xline, 10 scanlines
   312
   313 				; Basic graphic modes
   314 = 0002			GM_CHAR_G0	= 2			; 2 colors, 40x24, 960b, 40xline, 8 scanlines
   315 = 0006			GM_CHAR_G1	= 6			; 4 colors, 20x24, 480b, 40xline, 8 scanlines
   316 = 0007			GM_CHAR_G2	= 7			; 4 colors, 20x12, 240b, 20xline, 16 scanlines
   317 = 0004			GM_CHAR_G12	= 4			; 5 colors, 40x24, 960b, 40xline, 8 scanlines
   318 = 0005			GM_CHAR_G13	= 5			; 5 colors, 40x12, 480b, 40xline, 16 scanlines
   319
   320 = 0008			GM_PIXEL_G3	= 8			; 4 colors, 40x24, 240b, 10xline, 8 scanline
   321 = 0009			GM_PIXEL_G4	= 9			; 2 colors, 80x48, 480b, 10xline, 4 scanline
   322 = 000A			GM_PIXEL_G5	= 10		; 4 colors, 80x48, 960b, 20xline, 4 scanline
   323 = 000B			GM_PIXEL_G6	= 11		; 2 colors, 160x96, 1920b, 20xline, 2 scanline
   324 = 000D			GM_PIXEL_G7	= 13		; 4 colors, 160x96, 3840b, 40xline, 2 scanline
   325 = 000F			GM_PIXEL_G8	= 15		; 2 colors, 320x192, 7680b, 40xline, 1 scanline
   326 = 000C			GM_PIXEL_G14	= 12	; 2 colors, 160x192, 3840b, 20xline, 1 scanline
   327 = 000E			GM_PIXEL_G15	= 14	; 4 colors, 160x192, 7680b, 40xline, 1 scanline
   328
   329 = 000F			GM_PIXEL_G9	= 15		; 1 color, 80x192, 7680b, 40xline, 1 scanline
   330 = 000F			GM_PIXEL_G10	= 15	; 9 colors, 80x192, 7680b, 40xline, 1 scanline
   331 = 000F			GM_PIXEL_G11	= 15	; 16 colors, 80x192, 7680b, 40xline, 1 scanline
   332
   333 				; Prior values
   334 = 0001			PRV_PM_PRIORITY_1	= %00000001		; p0 p1 p2 p3 / pf0 pf1 pf2 pf3 (p5) / bk
   335 = 0002			PRV_PM_PRIORITY_2	= %00000010		; p0 p1 / pf0 pf1 pf2 pf3 (p5) / p2 p3 / bk
   336 = 0004			PRV_PM_PRIORITY_3	= %00000100		; pf0 pf1 pf2 pf3 (p5) /  p0 p1 p2 p3 / bk
   337 = 0008			PRV_PM_PRIORITY_4	= %00001000		; pf1 pf2 /  p0 p1 p2 p3 / pf0 pf3 (p5) / bk
   338 = 0010			PRV_FIFTH_PLAYER	= %00010000
   339 = 0020			PRV_PM_OVERLAP		= %00100000
   340 = 0040			PRV_GTIA_9			= %01000000
   341 = 0080			PRV_GTIA_10			= %10000000
   342 = 00C0			PRV_GTIA_11			= %11000000
   343
   344 				; Gractl values
   345 = 0001			GCTL_MISSILES		= %001
   346 = 0002			GCTL_PLAYERS		= %010
   347 = 0004			GCTL_LATCH_TRIGGERS	= %100
   348
   349 				; Consol values:
   350 = 0001			CNV_START_MASK		= %001
   351 = 0002			CNV_OPTION_MASK		= %010
   352 = 0004			CNV_SELECT_MASK		= %100
   353
   354 				; Stick values:
   355 = 0008			STV_RIGHT_MASK		= %1000
   356 = 0004			STV_LEFT_MASK		= %0100
   357 = 0002			STV_DOWN_MASK		= %0010
   358 = 0001			STV_UP_MASK			= %0001
   359
   360 = 0008			STICK_MASK_RIGHT	= %1000
   361 = 0004			STICK_MASK_LEFT		= %0100
   362 = 0002			STICK_MASK_DOWN		= %0010
   363 = 0001			STICK_MASK_UP		= %0001
   364
   365 = 0007			STICK_VALUE_RIGHT	= %0111
   366 = 000B			STICK_VALUE_LEFT	= %1011
   367 = 000D			STICK_VALUE_DOWN	= %1101
   368 = 000E			STICK_VALUE_UP		= %1110
   369
   370 				/*
   371 				KBCode Hexadecimal Values
   372 				 	$00	$01	$02	$03	$04	$05	$06	$07	$08	$09	$0A	$0B	$0C	$0D	$0E	$0F
   373 				$00	L	J	;	F1	F2	K	+	*	O	 	P	U	CR	I	-	=
   374 				$10	V	Hlp	C	F3	F4	B	X	Z	4	 	3	6	Esc	5	2	1
   375 				$20	,	Spc	.	N	 	M	/	Inv	R	 	E	Y	Tab	T	W	Q
   376 				$30	9	 	0	7	BS	8	<	>	F	H	D	 	Cap	G	S	A
   377
   378 				together with Shift Key: add +$40
   379 				together with Control key: add +$80 
   380 				*/
   380
    29 					icl "../../base/sys_macros.m65"
Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\..\..\base\sys_macros.m65
     1 				;================================================================================
     2 				; System macros, Atari XL + mads [NRV 2009]
     3 				;================================================================================
     4
     5 				;--------------------------------------------------------------------------------
     6 				; SetVector [address] [word]
     7 				;--------------------------------------------------------------------------------
     8
     9 					.macro SetVector
    10 					   .if :0 <> 2
    11 					      .error "SetVector error"
    12 				
    13 					   .else
    14 					      lda #<:2
    15 					      sta :1
    16 					      lda #>:2
    17 					      sta :1+1
    18 					   .endif
    19 				
    20 					.endm
    21
    22
    23 				;--------------------------------------------------------------------------------
    24 				; SetColor [0..4] [0..255]
    25 				; SetColor [0..4] [0..15] [0..15]
    26 				;--------------------------------------------------------------------------------
    27
    28 					.macro SetColor
    29 					   .if :0 < 2 .or :0 > 3
    30 					      .error "SetColor error"
    31 				
    32 					   .else
    33 					      .if :0 = 2
    34 					          lda #:2
    35 					          sta COLPF0+:1
    36 					      .else
    37 					          lda #[:2 * 16 + :3]
    38 					          sta COLPF0+:1
    39 					      .endif
    40 					   .endif
    41 				
    42 					.endm
    43
    44
    45 				;--------------------------------------------------------------------------------
    46 				; SetPMColor [0..3] [0..255]
    47 				; SetPMColor [0..3] [0..15] [0..15]
    48 				;--------------------------------------------------------------------------------
    49
    50 					.macro SetPMColor
    51 					   .if :0 < 2 .or :0 > 3
    52 					      .error "SetPMColor error"
    53 				
    54 					   .else
    55 					      .if :0 = 2
    56 					          lda #:2
    57 					          sta COLPM0+:1
    58 					      .else
    59 					          lda #[:2 * 16 + :3]
    60 					          sta COLPM0+:1
    61 					      .endif
    62 					   .endif
    63 				
    64 					.endm
    65
    66
    67 				;--------------------------------------------------------------------------------
    68 				; VcountSync [0..130]
    69 				; (maximum limit is different on PAL: 155)
    70 				; (could wait forever if there are interrupts activated!)
    71 				; (or if some other "thread" uses "wsync")
    72 				;--------------------------------------------------------------------------------
    73
    74 					.macro VcountSync
    75 					   .if :0 <> 1
    76 					      .error "VcountSync error"
    77 				
    78 					   .else
    79 					      sta WSYNC
    80 				
    81 					      lda #:1
    82 				VSync1	 cmp VCOUNT
    83 					      bne VSync1
    84 				
    85 					      lda #:1+1
    86 				VSync2	 cmp VCOUNT
    87 					      bne VSync2
    88 				
    89 					      sta WSYNC
    90 					   .endif
    91 				
    92 					.endm
    93
    94
    95 				;--------------------------------------------------------------------------------
    96 				; VcountWait [0..130]
    97 				; (maximum limit is different on PAL: 155)
    98 				;--------------------------------------------------------------------------------
    99
   100 					.macro VcountWait
   101 					   .if :0 <> 1
   102 					      .error "VcountWait error"
   103 				
   104 					   .else
   105 					      lda #:1
   106 				VWait1	 cmp VCOUNT
   107 					      bne VWait1
   108 					   .endif
   109 				
   110 					.endm
   111
   112
   113 				;--------------------------------------------------------------------------------
   114 				; VcountWaitUntilEnter [0..129] [(p1+1)..130]
   115 				; (maximum limit is different on PAL: 155)
   116 				;--------------------------------------------------------------------------------
   117
   118 					.macro VcountWaitUntilEnter
   119 					   .if :0 <> 2 .or :1 >= :2
   120 					      .error "VcountWaitUntilEnter error"
   121 				
   122 					   .else
   123 				VWait1     lda VCOUNT
   124 						 cmp #:1
   125 						 beq VExit
   126 					      bcc VWait1	; VCOUNT < :1
   127 						 cmp #:2
   128 						 beq VExit
   129 					      bcs VWait1	; VCOUNT >= :2
   130 				VExit
   131 					   .endif
   132 				
   133 					.endm
   134
   135
   136 				;--------------------------------------------------------------------------------
   137 				; VcountWaitUntilExit [0..129] [(p1+1)..130]
   138 				; (maximum limit is different on PAL: 155)
   139 				;--------------------------------------------------------------------------------
   140
   141 					.macro VcountWaitUntilExit
   142 					   .if :0 <> 2 .or :1 >= :2
   143 					      .error "VcountWaitUntilExit error"
   144 				
   145 					   .else
   146 				VWait1     lda VCOUNT
   147 						 cmp #:1
   148 						 beq VWait1
   149 					      bcc VExit	; VCOUNT < :1
   150 						 cmp #:2
   151 					      bcc VWait1	; VCOUNT < :2
   152 						 beq VWait1
   153 				VExit
   154 					   .endif
   155 				
   156 					.endm
   157
   158
   159 				;--------------------------------------------------------------------------------
   160 				; MarkScanLine [0..255] [0..255]
   161 				; (mark the current scan line with a color)
   162 				;--------------------------------------------------------------------------------
   163
   164 					.macro MarkScanLine
   165 					   .if :0 <> 0 .and :0 <> 2
   166 					      .error "MarkScanLine error"
   167 				
   168 					   .else
   169 					  	   .if :0 = 0
   170 				  		      sta WSYNC
   171 				  	     	 lda #255		; mark color
   172 					  	      sta COLBK
   173 				
   174 				  		      sta WSYNC
   175 				  	     	 lda #0		; restore color
   176 					  	      sta COLBK
   177 				
   178 				  		   .else
   179 					     	 sta WSYNC
   180 						      lda #:1		; mark color
   181 						      sta COLBK
   182 				
   183 						      sta WSYNC
   184 						      lda #:2		; restore color
   185 					     	 sta COLBK
   186 						   .endif
   187 					   .endif
   188 				
   189 					.endm
   190
   191
   192 				;--------------------------------------------------------------------------------
   193 				; MarkScanLineIfConsol [0..255] [0..255]
   194 				; (mark the current scan line with a color, if a consol key is pressed)
   195 				;--------------------------------------------------------------------------------
   196
   197 					.macro MarkScanLineIfConsol
   198 					   .if :0 <> 0 .and :0 <> 2
   199 					      .error "MarkScanLineIfConsol error"
   200 				
   201 					   .else
   202 						 .if :0 = 0
   203 						      lda CONSOL
   204 						      and #%111
   205 					     	 cmp #%111
   206 						      beq ExitMarkScanLineIfConsol
   207 				
   208 						      sta WSYNC
   209 						      lda #255		; mark color
   210 						      sta COLBK
   211 				
   212 						      sta WSYNC
   213 						      lda #0		; restore color
   214 					     	 sta COLBK
   215 				
   216 					   	 .else
   217 						      lda CONSOL
   218 						      and #%111
   219 					     	 cmp #%111
   220 						      beq ExitMarkScanLineIfConsol
   221 				
   222 						      sta WSYNC
   223 					     	 lda #:1		; mark color
   224 						      sta COLBK
   225 				
   226 						      sta WSYNC
   227 					     	 lda #:2		; restore color
   228 						      sta COLBK
   229 				
   230 					   	 .endif
   231 					   .endif
   232 				
   233 				ExitMarkScanLineIfConsol
   234 				
   235 					.endm
   236
   237
   238 				;--------------------------------------------------------------------------------
   239 				; MarkCyclesIfConsol [0..255] [0..255]
   240 				; (mark the current scan position with a color, for some cycles)
   241 				;--------------------------------------------------------------------------------
   242
   243 					.macro MarkCyclesIfConsol
   244 					   .if :0 = 0
   245 					      lda CONSOL
   246 					      and #%111
   247 					      cmp #%111
   248 					      beq ExitMarkCyclesIfConsol
   249 				
   250 					      lda #255		; mark color
   251 					      sta COLBK
   252 				
   253 					      lda ($00),y	; dummy 5 cycles
   254 					      lda ($00),y	; dummy 5 cycles
   255 					      lda ($00),y	; dummy 5 cycles
   256 					      lda ($00),y	; dummy 5 cycles
   257 					      lda ($00),y	; dummy 5 cycles
   258 					      lda ($00),y	; dummy 5 cycles
   259 				
   260 					      lda #0		; restore color
   261 					      sta COLBK
   262 				
   263 					   .elseif :0 = 2
   264 					      lda CONSOL
   265 					      and #%111
   266 					      cmp #%111
   267 					      beq ExitMarkCyclesIfConsol
   268 				
   269 					      lda #:1		; mark color
   270 					      sta COLBK
   271 				
   272 					      lda ($00),y	; dummy 5 cycles
   273 					      lda ($00),y	; dummy 5 cycles
   274 					      lda ($00),y	; dummy 5 cycles
   275 					      lda ($00),y	; dummy 5 cycles
   276 					      lda ($00),y	; dummy 5 cycles
   277 					      lda ($00),y	; dummy 5 cycles
   278 				
   279 					      lda #:2		; restore color
   280 					      sta COLBK
   281 				
   282 					   .else
   283 					      .error "MarkCyclesIfConsol error"
   284 				
   285 					   .endif
   286 				
   287 				ExitMarkCyclesIfConsol
   288 				
   289 					.endm
   290
   291
   292 				;--------------------------------------------------------------------------------
   293 				; SetBasic [0,1]
   294 				;--------------------------------------------------------------------------------
   295
   296 					.macro SetBasic
   297 					   .if :0 <> 1
   298 					      .error "SetBasic error"
   299 				
   300 					   .else
   301 					      .if :1 = 0
   302 					         lda PORTB	; deactivate Basic
   303 					         ora #%00000010
   304 					         sta PORTB
   305 					      .else
   306 					         lda PORTB	; activate Basic
   307 					         and #%11111101
   308 					         sta PORTB
   309 					      .endif
   310 					   .endif
   311 				
   312 					.endm
   313
   314
   315 				;--------------------------------------------------------------------------------
   316 				; SetOperativeSystem [0,1]
   317 				;--------------------------------------------------------------------------------
   318
   319 					.macro SetOperativeSystem
   320 					   .if :0 <> 1
   321 					      .error "SetOperativeSystem error"
   322 				
   323 					   .else
   324 					      .if :1 = 0
   325 					         lda PORTB	; deactivate Operative System
   326 					         and #%11111110
   327 					         sta PORTB
   328 					      .else
   329 					         lda PORTB	; activate Operative System
   330 					         ora #%00000001
   331 					         sta PORTB
   332 					      .endif
   333 					   .endif
   334 				
   335 					.endm
   336
   337
   338 				;--------------------------------------------------------------------------------
   339 				; EnableBasic
   340 				;--------------------------------------------------------------------------------
   341
   342 					.macro EnableBasic
   343 					   .if :0 <> 0
   344 					      .error "EnableBasic error"
   345 				
   346 					   .else
   347 					      SetBasic 1
   348 					   .endif
   349 				
   350 					.endm
   351
   352
   353 				;--------------------------------------------------------------------------------
   354 				; DisableBasic
   355 				;--------------------------------------------------------------------------------
   356
   357 					.macro DisableBasic
   358 					   .if :0 <> 0
   359 					      .error "DisableBasic error"
   360 				
   361 					   .else
   362 					      SetBasic 0
   363 					   .endif
   364 				
   365 					.endm
   366
   367
   368 				;--------------------------------------------------------------------------------
   369 				; EnableOperativeSystem
   370 				;--------------------------------------------------------------------------------
   371
   372 					.macro EnableOperativeSystem
   373 					   .if :0 <> 0
   374 					      .error "EnableOperativeSystem error"
   375 				
   376 					   .else
   377 					      SetOperativeSystem 1
   378 					   .endif
   379 				
   380 					.endm
   381
   382
   383 				;--------------------------------------------------------------------------------
   384 				; DisableOperativeSystem
   385 				;--------------------------------------------------------------------------------
   386
   387 					.macro DisableOperativeSystem
   388 					   .if :0 <> 0
   389 					      .error "DisableOperativeSystem error"
   390 				
   391 					   .else
   392 					      SetOperativeSystem 0
   393 					   .endif
   394 				
   395 					.endm
   396
   397
   398 				;--------------------------------------------------------------------------------
   399 				; EnableNormalInterrupts
   400 				;--------------------------------------------------------------------------------
   401
   402 					.macro EnableNormalInterrupts
   403 					   .if :0 <> 0
   404 					      .error "EnableNormalInterrupts error"
   405 				
   406 					   .else
   407 					      cli
   408 				;	      lda #[8+16+32]	; serial I/O interrupts
   409 				;	      lda #[64+128]		; keyboard and break interrupts (only ones enabled on powerup)
   410 				;	      sta IRQEN
   411 					      lda #64			; VBI interrupt
   412 					      sta NMIEN
   413 					   .endif
   414 				
   415 					.endm
   416
   417
   418 				;--------------------------------------------------------------------------------
   419 				; DisableNormalInterrupts
   420 				;--------------------------------------------------------------------------------
   421
   422 					.macro DisableNormalInterrupts
   423 					   .if :0 <> 0
   424 					      .error "DisableNormalInterrupts error"
   425 				
   426 					   .else
   427 					      sei
   428 					      lda #0
   429 					      sta IRQEN
   430 					      sta NMIEN
   431 					   .endif
   432 				
   433 					.endm
   434
   435
   436 				;--------------------------------------------------------------------------------
   437 				; ClearSystem
   438 				;--------------------------------------------------------------------------------
   439
   440 					.macro ClearSystem
   441 					   .if :0 <> 0
   442 					      .error "ClearSystem error"
   443 				
   444 					   .else
   445 					      clc
   446 					      cld
   447 				
   448 					      sei
   449 				
   450 					      lda #0
   451 					      sta IRQEN	; clear interrupts and screen
   452 					      sta NMIEN
   453 				
   454 					      sta DMACTL
   455 					      sta COLBK
   456 				
   457 					      sta GRACTL	; clear P/M
   458 					      sta GRAFP0
   459 					      sta GRAFP1
   460 					      sta GRAFP2
   461 					      sta GRAFP3
   462 					      sta GRAFM
   463 				
   464 					      sta HPOSP0
   465 					      sta HPOSP1
   466 					      sta HPOSP2
   467 					      sta HPOSP3
   468 					      sta HPOSM0
   469 					      sta HPOSM1
   470 					      sta HPOSM2
   471 					      sta HPOSM3
   472 				
   473 					      sta PRIOR	; clear GTIA also
   474 				
   475 					      sta AUDCTL	; clear sound
   476 					      sta AUDC1
   477 					      sta AUDC2
   478 					      sta AUDC3
   479 					      sta AUDC4
   480 				
   481 					      lda #3
   482 					      sta SKCTL
   483 					   .endif
   484 				
   485 					.endm
   486
   487
   488 				;--------------------------------------------------------------------------------
   489 				; SetDisplayListAddress [word]
   490 				; (use when the screen is not being displayed!)
   491 				; (remember to not cross the 1K limit..)
   492 				;--------------------------------------------------------------------------------
   493
   494 					.macro SetDisplayListAddress
   495 					   .if :0 <> 1
   496 					      .error "SetDisplayListAddress error"
   497 				
   498 					   .else
   499 					      SetVector DLISTL, :1
   500 				
   501 				;	      lda #<:1
   502 				;	      sta DLISTL
   503 				;	      lda #>:1
   504 				;	      sta DLISTH
   505 					   .endif
   506 				
   507 					.endm
   508
   509
   510 				;--------------------------------------------------------------------------------
   511 				; SetFontAddress [word]
   512 				; (remember that this transform to a page a number)
   513 				;--------------------------------------------------------------------------------
   514
   515 					.macro SetFontAddress
   516 					   .if :0 <> 1
   517 					      .error "SetFontAddress error"
   518 				
   519 					   .else
   520 					      lda #>:1
   521 					      sta CHBASE
   522 					   .endif
   523 				
   524 					.endm
   525
   526
   527 				;--------------------------------------------------------------------------------
   528 				; SetPMBaseAddress [word]
   529 				; (remember that this transform to a page a number)
   530 				;--------------------------------------------------------------------------------
   531
   532 					.macro SetPMBaseAddress
   533 					   .if :0 <> 1
   534 					      .error "SetPMBaseAddress error"
   535 				
   536 					   .else
   537 					      lda #>:1
   538 					      sta PMBASE
   539 					   .endif
   540 				
   541 					.endm
   542
   543
   544 				;--------------------------------------------------------------------------------
   545 				; SetMemory [address] [bytes] [value]
   546 				;--------------------------------------------------------------------------------
   547
   548 				; warning, using some page zero memory
   549
   550 					.macro SetMemory
   551 				
   552 				setMemPtr	= 254
   553 				setMemCounter	= 252
   554 				
   555 					   .if :0 <> 3
   556 					      .error "SetMemory error"
   557 				
   558 					   .else
   559 					      ldy #0
   560 				
   561 					      lda #<:1
   562 					      sta setMemPtr
   563 					      lda #>:1
   564 					      sta setMemPtr+1
   565 				
   566 					      .if :2 < 256
   567 					         lda #:3
   568 				setMemLoop1
   569 					         sta (setMemPtr),y
   570 					         iny
   571 					         cpy #:2
   572 					         bne setMemLoop1
   573 				
   574 					      .else
   575 					         lda #<:2
   576 					         sta setMemCounter
   577 					         lda #>:2
   578 					         sta setMemCounter+1
   579 				
   580 				setMemLoop2
   581 					         lda #:3
   582 					         sta (setMemPtr),y
   583 					         iny
   584 					         bne setMemB1
   585 					         inc setMemPtr+1
   586 				setMemB1
   587 					         lda setMemCounter
   588 					         bne setMemB2
   589 					         dec setMemCounter+1
   590 				setMemB2
   591 					         dec setMemCounter
   592 				
   593 					         lda setMemCounter
   594 					         ora setMemCounter+1
   595 					         bne setMemLoop2
   596 					      .endif
   597 					   .endif
   598 				
   599 					.endm
   600
   601
   602 				;--------------------------------------------------------------------------------
   603 				; SetMemoryRandom [address] [bytes]
   604 				;--------------------------------------------------------------------------------
   605
   606 				; warning, using some page zero memory
   607
   608 					.macro SetMemoryRandom
   609 				
   610 				setMemRPtr	= 254
   611 				setMemRCounter	= 252
   612 				
   613 					   .if :0 <> 2
   614 					      .error "SetMemoryRandom error"
   615 				
   616 					   .else
   617 					      ldy #0
   618 				
   619 					      lda #<:1
   620 					      sta setMemRPtr
   621 					      lda #>:1
   622 					      sta setMemRPtr+1
   623 				
   624 					      .if :2 < 256
   625 				setMemRLoop1
   626 					         lda RANDOM
   627 					         sta (setMemRPtr),y
   628 					         iny
   629 					         cpy #:2
   630 					         bne setMemRLoop1
   631 				
   632 					      .else
   633 					         lda #<:2
   634 					         sta setMemRCounter
   635 					         lda #>:2
   636 					         sta setMemRCounter+1
   637 				
   638 				setMemRLoop2
   639 					         lda RANDOM
   640 					         sta (setMemRPtr),y
   641 					         iny
   642 					         bne setMemRB1
   643 					         inc setMemRPtr+1
   644 				setMemRB1
   645 					         lda setMemRCounter
   646 					         bne setMemRB2
   647 					         dec setMemRCounter+1
   648 				setMemRB2
   649 					         dec setMemRCounter
   650 				
   651 					         lda setMemRCounter
   652 					         ora setMemRCounter+1
   653 					         bne setMemRLoop2
   654 					      .endif
   655 					   .endif
   656 				
   657 					.endm
   658
   659
   660 				;--------------------------------------------------------------------------------
   661 				; ClampMemory [address] [bytes] [min value] [max value]
   662 				;--------------------------------------------------------------------------------
   663
   664 				; warning, using some page zero memory
   665
   666 					.macro ClampMemory
   667 				
   668 				clampMemPtr	= 254
   669 				clampMemCounter	= 252
   670 				
   671 					   .if :0 <> 4
   672 					      .error "ClampMemory error"
   673 				
   674 					   .else
   675 					      ldy #0
   676 				
   677 					      lda #<:1
   678 					      sta clampMemPtr
   679 					      lda #>:1
   680 					      sta clampMemPtr+1
   681 				
   682 					      .if :2 < 256
   683 				clampMemLoop1
   684 					         lda (clampMemPtr),y
   685 					         cmp #:3
   686 					         bcs clampMemB3		; if >= min then continue
   687 					         lda #:3
   688 					         jmp clampMemB4
   689 				clampMemB3
   690 					         cmp #:4
   691 					         bcc clampMemB4		; if < max then continue
   692 				;	         beq clampMemB4		; if = max then continue
   693 					         lda #:4
   694 				clampMemB4
   695 					         sta (clampMemPtr),y
   696 				
   697 					         iny
   698 					         cpy #:2
   699 					         bne clampMemLoop1
   700 				
   701 					      .else
   702 					         lda #<:2
   703 					         sta clampMemCounter
   704 					         lda #>:2
   705 					         sta clampMemCounter+1
   706 				
   707 				clampMemLoop2
   708 					         lda (clampMemPtr),y
   709 					         cmp #:3
   710 					         bcs clampMemB5		; if >= min then continue
   711 					         lda #:3
   712 					         jmp clampMemB6
   713 				clampMemB5
   714 					         cmp #:4
   715 					         bcc clampMemB6		; if < max then continue
   716 				;	         beq clampMemB6		; if = max then continue
   717 					         lda #:4
   718 				clampMemB6
   719 					         sta (clampMemPtr),y
   720 				
   721 					         iny
   722 					         bne clampMemB1
   723 					         inc clampMemPtr+1
   724 				clampMemB1
   725 					         lda clampMemCounter
   726 					         bne clampMemB2
   727 					         dec clampMemCounter+1
   728 				clampMemB2
   729 					         dec clampMemCounter
   730 				
   731 					         lda clampMemCounter
   732 					         ora clampMemCounter+1
   733 					         bne clampMemLoop2
   734 					      .endif
   735 					   .endif
   736 				
   737 					.endm
   738
   739
   740 				;--------------------------------------------------------------------------------
   741 				; AndMemory [address] [bytes] [value]
   742 				;--------------------------------------------------------------------------------
   743
   744 				; warning, using some page zero memory
   745
   746 					.macro AndMemory
   747 				
   748 				andMemPtr	= 254
   749 				andMemCounter	= 252
   750 				
   751 					   .if :0 <> 3
   752 					      .error "AndMemory error"
   753 				
   754 					   .else
   755 					      ldy #0
   756 				
   757 					      lda #<:1
   758 					      sta andMemPtr
   759 					      lda #>:1
   760 					      sta andMemPtr+1
   761 				
   762 					      .if :2 < 256
   763 				andMemLoop1
   764 					         lda (andMemPtr),y
   765 					         and #:3
   766 					         sta (andMemPtr),y
   767 					         iny
   768 					         cpy #:2
   769 					         bne andMemLoop1
   770 				
   771 					      .else
   772 					         lda #<:2
   773 					         sta andMemCounter
   774 					         lda #>:2
   775 					         sta andMemCounter+1
   776 				
   777 				andMemLoop2
   778 					         lda (andMemPtr),y
   779 					         and #:3
   780 					         sta (andMemPtr),y
   781 					         iny
   782 					         bne andMemB1
   783 					         inc andMemPtr+1
   784 				andMemB1
   785 					         lda andMemCounter
   786 					         bne andMemB2
   787 					         dec andMemCounter+1
   788 				andMemB2
   789 					         dec andMemCounter
   790 				
   791 					         lda andMemCounter
   792 					         ora andMemCounter+1
   793 					         bne andMemLoop2
   794 					      .endif
   795 					   .endif
   796 				
   797 					.endm
   798
   799
   800 				;--------------------------------------------------------------------------------
   801 				; CopyMemory [source address] [dest address] [bytes]
   802 				;--------------------------------------------------------------------------------
   803
   804 				; warning, using some page zero memory
   805
   806 					.macro CopyMemory
   807 				
   808 				copyMemPtr1	= 254
   809 				copyMemPtr2	= 252
   810 				copyMemCounter	= 250
   811 				
   812 					   .if :0 <> 3
   813 					      .error "CopyMemory error"
   814 				
   815 					   .else
   816 					      ldy #0
   817 				
   818 					      .if :3 <= 256
   819 				copyMemLoop1
   820 						lda :1,y
   821 						sta :2,y
   822 						iny
   823 						.if :3 < 256
   824 							cpy #<:3
   825 						.endif
   826 						bne copyMemLoop1
   827 				
   828 					      .else
   829 					        lda #<:1
   830 					        sta copyMemPtr1
   831 					        lda #>:1
   832 					        sta copyMemPtr1+1
   833 						lda #<:2
   834 						sta copyMemPtr2
   835 						lda #>:2
   836 						sta copyMemPtr2+1
   837 						lda #<:3
   838 						sta copyMemCounter
   839 						lda #>:3
   840 						sta copyMemCounter+1
   841 				
   842 				copyMemLoop2
   843 						lda (copyMemPtr1),y
   844 						sta (copyMemPtr2),y
   845 						iny
   846 						bne copyMemB1
   847 						inc copyMemPtr1+1
   848 						inc copyMemPtr2+1
   849 				copyMemB1
   850 						lda copyMemCounter
   851 						bne copyMemB2
   852 						dec copyMemCounter+1
   853 				copyMemB2
   854 						dec copyMemCounter
   855 				
   856 						lda copyMemCounter
   857 						ora copyMemCounter+1
   858 						bne copyMemLoop2
   859 					      .endif
   860 					   .endif
   861 				
   862 					.endm
   863
   864
   865 				;--------------------------------------------------------------------------------
   866 				; CreateDisplayList [DL address] [DL mode] [memory address]
   867 				; (remember to not cross the 1K limit.. and the 4K limit)
   868 				;--------------------------------------------------------------------------------
   869
   870 				; 	.macro CreateDisplayList
   871 				; 	   .if :0 <> 3
   872 				; 	      .error "CreateDisplayList error"
   873 				; 
   874 				; 	   .else
   875 				; 
   876 				; 	   .endif
   877 				; 
   878 				; 	.endm
   879
   880
   881 				;--------------------------------------------------------------------------------
   882 				;
   883 				;--------------------------------------------------------------------------------
   884
   885
   886
    30 					
    31 				// Now a cart type definition
    32
    33 				//Cartridge types available
    34 				// 1: Atarimax 8 Mbit
    35 				// 2: Switchable XEGS 8 Mbit
    36 				// 3: Atarimax 1 Mbit
    37 				// 4: Atrax 128 Kbytes (1 Mbit)
    38 				// 5: Megacart 128 KB
    39 				// 6: Megacart 1024 KB
    40
    41 = 0001			TYPE_CART =1
    42
    43 				.if TYPE_CART = 1 
    44 = A000				start_cartridge = $A000
    45 = C000				end_bank = $C000
    46 = 0080				cart_banks = 128
    47 = D5FF				cart_apaga = $D5FF
    48 = 0000				FLAG_16KB = $00
    49 				.elseif TYPE_CART = 2
    50 					start_cartridge = $8000
    51 					end_bank = $A000
    52 					cart_banks = 128
    53 					cart_apaga = $D5FF
    54 					FLAG_16KB = $00
    55 				.elseif TYPE_CART = 3
    56 					start_cartridge = $A000
    57 					end_bank = $C000
    58 					cart_banks = 16
    59 					cart_apaga = $D51F
    60 					FLAG_16KB = $00
    61 				.elseif TYPE_CART = 4
    62 					start_cartridge = $A000
    63 					end_bank = $C000
    64 					cart_banks = 16
    65 					cart_apaga = $D5FF
    66 					FLAG_16KB = $00
    67 				.elseif TYPE_CART = 5
    68 					start_cartridge = $8000
    69 					end_bank = $C000
    70 					cart_banks = 8
    71 					cart_apaga = $D5FF
    72 					FLAG_16KB = $01
    73 				.elseif TYPE_CART = 6
    74 					start_cartridge = $8000
    75 					end_bank = $C000
    76 					cart_banks = 64
    77 					cart_apaga = $D5FF
    78 					FLAG_16KB = $01
    79 				.else
    80 					.error "Cartridge type not defined"
    81 				.endif
    82
    83 				//Parameters to init the loader
    84
    85 = 0400			start_loader = $0400
    86 = CC00			start_loader2 = $cc00		//Dungeon loader.
    87 = CD00			start_cart_io =$cd00		//Cartridge IO routines.
    88 = 0480			start_init2 = $480
    89 = 0100			start_exit = $100
    90
    91 				// Page zero parameters
    92 = 0032			BUFRLO 	= $32
    93 = 0033			BUFRHI 	= $33
    94 = 0034			AUX1	= $34
    95 = 0035			AUX2	= $35
    96 = 0036			c_bank	= $36
    97
    98 				//Starting the cartridge
    99
   100 					org start_cartridge
   101 A000				lmb #$00	//BANK 0
   102
   103 				// First, copy the loader routine and get back to the OS. You can do whatever you want to initialize.
   104 				Copy_init
   105 				.proc init
   106 				// 1st stage
   107 A000 A9 FF 8D 01 D3		mva #$ff portb
   108 A005 A9 01 8D F8 03		mva #$01 basicf
   109 A00A AD 1F D0			lda consol
   110 A00D 29 04			and #$04	//OPTION??
   111 A00F D0 10			bne NO_OPTION	//NO!
   112 A011				CopyMemory Copy_Exit,start_exit,(.len Exit)
Macro: COPYMEMORY [Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\..\..\base\sys_macros.m65]
     2 = 00FE			copyMemPtr1	= 254
     3 = 00FC			copyMemPtr2	= 252
     4 = 00FA			copyMemCounter	= 250
    10 A011 A0 00			      ldy #0
    13 A013			copyMemLoop1
    14 A013 B9 66 A1				lda COPY_EXIT,y
    15 A016 99 00 01				sta START_EXIT,y
    16 A019 C8					iny
    18 A01A C0 20					cpy #<(.LEN EXIT)
    20 A01C D0 F5				bne copyMemLoop1
Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\Ardungeon.asm
   113 A01E 4C 00 01			jmp exit
   114 A021			NO_OPTION
   115 A021				CopyMemory Copy_loader, start_loader,(.len loader)	//Copy loader to the desired address in the parameters.
Macro: COPYMEMORY [Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\..\..\base\sys_macros.m65]
     2 = 00FE			copyMemPtr1	= 254
     3 = 00FC			copyMemPtr2	= 252
     4 = 00FA			copyMemCounter	= 250
    10 A021 A0 00			      ldy #0
    13 A023			copyMemLoop1
    14 A023 B9 74 A2				lda COPY_LOADER,y
    15 A026 99 00 04				sta START_LOADER,y
    16 A029 C8					iny
    18 A02A C0 6A					cpy #<(.LEN LOADER)
    20 A02C D0 F5				bne copyMemLoop1
Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\Ardungeon.asm
   116 A02E				CopyMemory Copy_init2, init2, (.len init2)		//Copy second init routine if necessary.
Macro: COPYMEMORY [Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\..\..\base\sys_macros.m65]
     2 = 00FE			copyMemPtr1	= 254
     3 = 00FC			copyMemPtr2	= 252
     4 = 00FA			copyMemCounter	= 250
    10 A02E A0 00			      ldy #0
    13 A030			copyMemLoop1
    14 A030 B9 86 A1				lda COPY_INIT2,y
    15 A033 99 80 04				sta INIT2,y
    16 A036 C8					iny
    18 A037 C0 EE					cpy #<(.LEN INIT2)
    20 A039 D0 F5				bne copyMemLoop1
Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\Ardungeon.asm
   117 A03B 18				clc
   118 A03C 60				rts
   119 				.endp
   120 A03D			.proc init1
   121 A03D				CopyMemory $c000,$800,$1000				//Copy OS to RAM
Macro: COPYMEMORY [Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\..\..\base\sys_macros.m65]
     2 = 00FE			copyMemPtr1	= 254
     3 = 00FC			copyMemPtr2	= 252
     4 = 00FA			copyMemCounter	= 250
    10 A03D A0 00			      ldy #0
    23 A03F A9 00			        lda #<$C000
    24 A041 85 FE			        sta copyMemPtr1
    25 A043 A9 C0			        lda #>$C000
    26 A045 85 FF			        sta copyMemPtr1+1
    27 A047 A9 00				lda #<$800
    28 A049 85 FC				sta copyMemPtr2
    29 A04B A9 08				lda #>$800
    30 A04D 85 FD				sta copyMemPtr2+1
    31 A04F A9 00				lda #<$1000
    32 A051 85 FA				sta copyMemCounter
    33 A053 A9 10				lda #>$1000
    34 A055 85 FB				sta copyMemCounter+1
    36 A057			copyMemLoop2
    37 A057 B1 FE				lda (copyMemPtr1),y
    38 A059 91 FC				sta (copyMemPtr2),y
    39 A05B C8					iny
    40 A05C D0 04				bne copyMemB1
    41 A05E E6 FF				inc copyMemPtr1+1
    42 A060 E6 FD				inc copyMemPtr2+1
    43 A062			copyMemB1
    44 A062 A5 FA				lda copyMemCounter
    45 A064 D0 02				bne copyMemB2
    46 A066 C6 FB				dec copyMemCounter+1
    47 A068			copyMemB2
    48 A068 C6 FA				dec copyMemCounter
    50 A06A A5 FA				lda copyMemCounter
    51 A06C 05 FB				ora copyMemCounter+1
    52 A06E D0 E7				bne copyMemLoop2
Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\Ardungeon.asm
   122 A070				CopyMemory $d800,$1800,$2800
Macro: COPYMEMORY [Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\..\..\base\sys_macros.m65]
     2 = 00FE			copyMemPtr1	= 254
     3 = 00FC			copyMemPtr2	= 252
     4 = 00FA			copyMemCounter	= 250
    10 A070 A0 00			      ldy #0
    23 A072 A9 00			        lda #<$D800
    24 A074 85 FE			        sta copyMemPtr1
    25 A076 A9 D8			        lda #>$D800
    26 A078 85 FF			        sta copyMemPtr1+1
    27 A07A A9 00				lda #<$1800
    28 A07C 85 FC				sta copyMemPtr2
    29 A07E A9 18				lda #>$1800
    30 A080 85 FD				sta copyMemPtr2+1
    31 A082 A9 00				lda #<$2800
    32 A084 85 FA				sta copyMemCounter
    33 A086 A9 28				lda #>$2800
    34 A088 85 FB				sta copyMemCounter+1
    36 A08A			copyMemLoop2
    37 A08A B1 FE				lda (copyMemPtr1),y
    38 A08C 91 FC				sta (copyMemPtr2),y
    39 A08E C8					iny
    40 A08F D0 04				bne copyMemB1
    41 A091 E6 FF				inc copyMemPtr1+1
    42 A093 E6 FD				inc copyMemPtr2+1
    43 A095			copyMemB1
    44 A095 A5 FA				lda copyMemCounter
    45 A097 D0 02				bne copyMemB2
    46 A099 C6 FB				dec copyMemCounter+1
    47 A09B			copyMemB2
    48 A09B C6 FA				dec copyMemCounter
    50 A09D A5 FA				lda copyMemCounter
    51 A09F 05 FB				ora copyMemCounter+1
    52 A0A1 D0 E7				bne copyMemLoop2
Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\Ardungeon.asm
   123 A0A3 A9 20			lda #$20
   124 A0A5 8D F4 02			sta chbas
   125 A0A8 8D 09 D4			sta chbase
   126 A0AB A5 14			lda rtclock
   127 A0AD C5 14		loop1	cmp rtclock
   128 A0AF F0 FC			beq loop1
   129
   130 A0B1 78				sei
   131 A0B2 A9 00 8D 0E D4		mva #$00 nmien
   132 A0B7 A9 FE 8D 01 D3		mva #$fe portb
   133 A0BC				CopyMemory $800,$c000,$1000				//Put OS on upper RAM
Macro: COPYMEMORY [Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\..\..\base\sys_macros.m65]
     2 = 00FE			copyMemPtr1	= 254
     3 = 00FC			copyMemPtr2	= 252
     4 = 00FA			copyMemCounter	= 250
    10 A0BC A0 00			      ldy #0
    23 A0BE A9 00			        lda #<$800
    24 A0C0 85 FE			        sta copyMemPtr1
    25 A0C2 A9 08			        lda #>$800
    26 A0C4 85 FF			        sta copyMemPtr1+1
    27 A0C6 A9 00				lda #<$C000
    28 A0C8 85 FC				sta copyMemPtr2
    29 A0CA A9 C0				lda #>$C000
    30 A0CC 85 FD				sta copyMemPtr2+1
    31 A0CE A9 00				lda #<$1000
    32 A0D0 85 FA				sta copyMemCounter
    33 A0D2 A9 10				lda #>$1000
    34 A0D4 85 FB				sta copyMemCounter+1
    36 A0D6			copyMemLoop2
    37 A0D6 B1 FE				lda (copyMemPtr1),y
    38 A0D8 91 FC				sta (copyMemPtr2),y
    39 A0DA C8					iny
    40 A0DB D0 04				bne copyMemB1
    41 A0DD E6 FF				inc copyMemPtr1+1
    42 A0DF E6 FD				inc copyMemPtr2+1
    43 A0E1			copyMemB1
    44 A0E1 A5 FA				lda copyMemCounter
    45 A0E3 D0 02				bne copyMemB2
    46 A0E5 C6 FB				dec copyMemCounter+1
    47 A0E7			copyMemB2
    48 A0E7 C6 FA				dec copyMemCounter
    50 A0E9 A5 FA				lda copyMemCounter
    51 A0EB 05 FB				ora copyMemCounter+1
    52 A0ED D0 E7				bne copyMemLoop2
Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\Ardungeon.asm
   134 A0EF				CopyMemory $1800,$d800,$2800
Macro: COPYMEMORY [Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\..\..\base\sys_macros.m65]
     2 = 00FE			copyMemPtr1	= 254
     3 = 00FC			copyMemPtr2	= 252
     4 = 00FA			copyMemCounter	= 250
    10 A0EF A0 00			      ldy #0
    23 A0F1 A9 00			        lda #<$1800
    24 A0F3 85 FE			        sta copyMemPtr1
    25 A0F5 A9 18			        lda #>$1800
    26 A0F7 85 FF			        sta copyMemPtr1+1
    27 A0F9 A9 00				lda #<$D800
    28 A0FB 85 FC				sta copyMemPtr2
    29 A0FD A9 D8				lda #>$D800
    30 A0FF 85 FD				sta copyMemPtr2+1
    31 A101 A9 00				lda #<$2800
    32 A103 85 FA				sta copyMemCounter
    33 A105 A9 28				lda #>$2800
    34 A107 85 FB				sta copyMemCounter+1
    36 A109			copyMemLoop2
    37 A109 B1 FE				lda (copyMemPtr1),y
    38 A10B 91 FC				sta (copyMemPtr2),y
    39 A10D C8					iny
    40 A10E D0 04				bne copyMemB1
    41 A110 E6 FF				inc copyMemPtr1+1
    42 A112 E6 FD				inc copyMemPtr2+1
    43 A114			copyMemB1
    44 A114 A5 FA				lda copyMemCounter
    45 A116 D0 02				bne copyMemB2
    46 A118 C6 FB				dec copyMemCounter+1
    47 A11A			copyMemB2
    48 A11A C6 FA				dec copyMemCounter
    50 A11C A5 FA				lda copyMemCounter
    51 A11E 05 FB				ora copyMemCounter+1
    52 A120 D0 E7				bne copyMemLoop2
Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\Ardungeon.asm
   135 A122 A9 E0			lda #$e0
   136 A124 8D F4 02			sta chbas
   137 A127 8D 09 D4			sta chbase
   138 A12A A9 40 8D 0E D4		mva #$40 nmien
   139 A12F				CopyMemory Copy_loader2, start_loader2,(.len loader2)
Macro: COPYMEMORY [Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\..\..\base\sys_macros.m65]
     2 = 00FE			copyMemPtr1	= 254
     3 = 00FC			copyMemPtr2	= 252
     4 = 00FA			copyMemCounter	= 250
    10 A12F A0 00			      ldy #0
    23 A131 A9 DE			        lda #<COPY_LOADER2
    24 A133 85 FE			        sta copyMemPtr1
    25 A135 A9 A2			        lda #>COPY_LOADER2
    26 A137 85 FF			        sta copyMemPtr1+1
    27 A139 A9 00				lda #<START_LOADER2
    28 A13B 85 FC				sta copyMemPtr2
    29 A13D A9 CC				lda #>START_LOADER2
    30 A13F 85 FD				sta copyMemPtr2+1
    31 A141 A9 53				lda #<(.LEN LOADER2)
    32 A143 85 FA				sta copyMemCounter
    33 A145 A9 02				lda #>(.LEN LOADER2)
    34 A147 85 FB				sta copyMemCounter+1
    36 A149			copyMemLoop2
    37 A149 B1 FE				lda (copyMemPtr1),y
    38 A14B 91 FC				sta (copyMemPtr2),y
    39 A14D C8					iny
    40 A14E D0 04				bne copyMemB1
    41 A150 E6 FF				inc copyMemPtr1+1
    42 A152 E6 FD				inc copyMemPtr2+1
    43 A154			copyMemB1
    44 A154 A5 FA				lda copyMemCounter
    45 A156 D0 02				bne copyMemB2
    46 A158 C6 FB				dec copyMemCounter+1
    47 A15A			copyMemB2
    48 A15A C6 FA				dec copyMemCounter
    50 A15C A5 FA				lda copyMemCounter
    51 A15E 05 FB				ora copyMemCounter+1
    52 A160 D0 E7				bne copyMemLoop2
Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\Ardungeon.asm
   140 A162 58				cli
   141 A163 4C 80 04			jmp init2
   142 				.endp
   143 A166			Copy_exit
   144 A166			.proc exit, start_exit
   145 0100 78				sei
   146 0101 A9 00			lda #$00
   147 0103 8D 0E D4			sta nmien
   148 0106 A9 FF			lda #$ff
   149 0108 8D F8 03			sta basicf
   150 010B 8D FF D5			sta cart_apaga
   151 010E AD 13 D0			lda trig3
   152 0111 8D FA 03			sta gintlk
   153 0114 A9 40			lda #$40
   154 0116 8D 0E D4			sta nmien
   155 0119 A9 01			lda #$01
   156 011B 8D FD BF			sta $BFFD	//Boot disk!
   157 011E 58				cli
   158 011F 60				rts
   159 				.endp
   160
   161 A186			Copy_init2
   162 A186			.proc init2, start_init2
   163 0480 A2 FF			ldx #$ff
   164 0482 9A				txs
   165 0483 8E FF D5			stx cart_apaga
   166 0486 AD 13 D0 8D FA 03		mva trig3 gintlk
   167 048C A9 00 8D 04 03 A9 + 	mwa #$600 dbuflo
   168 0496 A9 01 8D 0A 03 A9 + 	mwa #$01  daux1
   169 04A0 A9 52 8D 02 03		mva #$52  dcomnd
   170 04A5 20 00 04			jsr loader		//Read 1st sector
   171 04A8 A9 00 8D 33 06 A9 + 	mwa #loader $633	//Patch SIO call
   172 04B2 A9 C4 8D 3E 06 A9 + 	mwa #cont $63e		//Patch final instruction
   173 04BC A9 70 8D 2E 06		mva #$70 $62e
   174 04C1 4C 06 06			jmp $606
   175 04C4			cont
   176 				;	lda #$00
   177 				;	sta sdmctl
   178 				;	sta dmactl		//Turn screen off
   179 04C4 A9 70			lda #$70
   180 04C6 8D 05 70			sta $7005
   181 04C9 8D 19 70			sta $7019
   182 04CC 8D 20 70			sta $7020
   183 04CF 8D 3F 70			sta $703f
   184 04D2 8D 7E 70			sta $707e
   185 04D5 A9 7D			lda #$7d
   186 04D7 8D 0F 70			sta $700f
   187 04DA 8D 67 70			sta $7067
   188 04DD A9 00 8D 46 70 A9 + 	mwa #loader $7046	//Patch SIO call
   189 04E7 A9 F4 8D 41 70 A9 + 	mwa #cont2 $7041	//Patch final instruction
   190 04F1 4C 00 70			jmp $7000		//GO!
   191 04F4			cont2
   192 04F4 A9 22			lda #$22
   193 04F6 8D 2F 02			sta sdmctl
   194 04F9 8D 00 D4			sta dmactl		//Turn screen on
   195 04FC A9 00 8D 43 1E A9 + 	mwa #loader $1e43	//Patch SIO call 1
   196 0506 A9 00 8D 7D 1E A9 + 	mwa #loader $1e7d	//Patch SIO call 2
   197 0510 A9 1D 8D 7A 1E A9 + 	mwa #cont3 $1e7a	//Patch final instruction
   198 051A 4C 00 20			jmp $2000		//Execute intro!!
   199 051D			cont3
   200 051D A9 20			lda #$20		//NO "48K" display!!
   201 051F 8D 8F 81			sta $818f
   202 0522 8D 90 81			sta $8190
   203 0525 8D 91 81			sta $8191		//Done!
   204 0528 A9 4C 8D A4 81		mva #$4c $81a4		//Skip
   205 052D A9 21 8D A5 81 A9 + 	mwa #$8221 $81a5	//RAM size detection
   206
   207 				//TO DO: patch custom SIO command to $CC00
   208 				//What to know:
   209 				//	$230 = SIO drive ID ($31-$34)
   210 				//	$231 = SIO command ($52 read, $53 status, $50 put, $22 format)
   211 				//	$232 = SIO aux1 (sector number lo byte)
   212 				//	$233 = SIO aux2 (sector number hi byte)
   213 				// Pending: where to locate the buffer ($CD00? or similar.)
   214
   215 0537 A9 00 8D A1 24 A9 + 	mwa #loader2 $24a1
   216 				//	mva #$02 $80e1		//Skip Virtual D4: detection
   217 0541 A9 4C			lda #$4c		//NOPs to force detection on D1:
   218 0543 8D E0 80			sta $80e0
   219 0546 A9 0D 8D E1 80 A9 + 	mwa #$810d $80e1
   220 0550 A9 EA			lda #$ea		//Store NOPs
   221 0552 8D 93 28			sta $2893		//Forces no checksum
   222 0555 8D 94 28			sta $2894		//Forces no checksum
   223 0558 8D 8B 28			sta $288b		//Forces no checksum
   224 055B 8D 8C 28			sta $288c		//Forces no checksum
   225 055E A9 00			lda #$00
   226 0560 8D 4E 02			sta $24e		//Virtual D1: enabled!
   227 0563 8D 51 02			sta $251		//Virtual D4: enabled! 
   228 0566 A9 34 8D 0E 81		mva #$34 $810e		//Use D4: as main drive
   229 056B 4C 7E 80			jmp $807e		//Go to the game!
   230 				.endp
   231
   232 A274			Copy_init3
   233
   234 				// Now, we put the loader
   235 A274			Copy_Loader
   236 A274			.proc	loader , start_loader
   237 0400 78				sei		// No IRQs!
   238 0401 AD 0E D4			lda nmien	// Save NMIEN
   239 0404 48				pha		// Store it
   240 0405 A9 00			lda #$00	
   241 0407 8D 0E D4			sta nmien	// No NMIs!
   242 040A AD 04 03			lda dbuflo	// Take LSB of the address to store
   243 040D 85 32			sta bufrlo	// Store it on Page Zero!
   244 040F AD 05 03			lda dbufhi	// Take MSB of the addres to store
   245 0412 85 33			sta bufrhi	// Store it!
   246 0414 38				sec		// Let's substract 1
   247 0415 AD 0A 03			lda daux1	// To the sector number!
   248 0418 E9 01			sbc #$01
   249 041A 85 34			sta aux1	// Store it!
   250 041C AD 0B 03			lda daux2	// Take MSB of the sector to read
   251 041F E9 00			sbc #$00	// Make sure we store it
   252 0421 85 35			sta aux2	// on page zero!
   253 0423 18				clc		// Clear the carry.
   254 0424 A5 34			lda aux1	// Take new sector number
   255 0426 48				pha		// save it!
   256 					.if FLAG_16KB = 0
   257 0427 29 C0				and #$c0	// Take bits 6 and 7
   258 					.else
   259 						and #$80	//In case of 16 kb banks just take bit 7
   260
   261 					.endif
   262 0429 4A 4A 4A 4A 4A 4A		:6 lsr		// Move it to bit 0 and 1!
   263 					.if FLAG_16KB = 1
   264 						lsr	// Or bit 7 to 0 in case of 16kb banks
   265 					.endif
   266 042F 85 34			sta aux1	// Store it!
   267 0431 A5 35			lda aux2	// Take MSB of the sector.
   268 0433 0A				asl		// Move 2 bits to the left! Bits 0 and 1 are zero 
   269 					.if FLAG_16KB = 0 //Or 1 bit if it's a Megacart
   270 0434 0A					asl		// Done!
   271 					.endif
   272 0435 05 34			ora aux1	// Put bits 0 and 1 on from the previous calculation 
   273 0437 18				clc		// Preparing to add 1
   274 = 0439			parameter=*+1		// IMPORTANT: the parameter sets the initial side from the disk. Originally, 1
   275 0438 69 01			adc #$01	// Add it!
   276 043A 85 36			sta c_bank	// Store cartridge bank!
   277 043C 68				pla		// take previous LSB of the sector number.
   278 					.if FLAG_16KB = 0
   279 043D 29 3F				and #$3F	// Take bits from 0 to 5. Bits 6 and 7 were previously taken to calculate the cartridge bank.
   280 					.else
   281 						and #$7f	// Take bits from 0 to 6. Bit 7 was previously taken to calculate the cartridge bank
   282 					.endif
   283 043F 4A				lsr		// Shift bit 0 to carry flag. That way, we'll know if the LSB to read on the cartridge is $00 or $80
   284 0440 09 A0			ora #>start_cartridge	// Establish the initial address from the cartridge
   285 0442 85 35			sta aux2	// Store it as MSB from the address to read from the cartridge
   286 0444 A9 00			lda #$00	// Taking carry
   287 0446 6A				ror		// To determine if LSB is $00 or $80
   288 0447 85 34			sta aux1	// Save it!
   289 0449 A0 7F			ldy #$7F	// Number of bytes to read from cartridge (128)
   290 044B			loop
   291 044B A5 36			lda c_bank	// First, we take the cartridge bank calculated
   292 044D AA				tax		// Transfer to register X
   293 044E 9D 00 D5			sta $d500,x	// And save to the cartridge control area. This way I can use Data bus or address bus bank-switching methods 
   294 0451 B1 34			lda (aux1),y	// Read the byte from the cartridge
   295 0453 48				pha		// Store it before turning off the cartridge
   296 0454 A9 FF			lda #$FF	// Let's turn the cartridge off
   297 0456 8D FF D5			sta cart_apaga	// Done!
   298 0459 68				pla		// Recover byte reading
   299 045A 91 32			sta (bufrlo),y	// Store it to the final address
   300 045C 88				dey		// Are we done with the byte copying?
   301 045D 10 EC			bpl loop	// Not yet
   302 045F 68				pla		// Ending the cartridge reading process. Now we recover the computer status
   303 0460 8D 0E D4			sta nmien	// Recover NMIs
   304 0463 58				cli		// Recover IRQs
   305 0464 A0 01			ldy #$01	// All done without errors
   306 0466 8C 03 03			sty dstats	// Save it to DSTATS!
   307 0469 60				rts		// BYE!!
   308 046A			fin_loader
   309 				.endp
   310
   311 A2DE			Copy_loader2
   312 A2DE			.proc	loader2 , start_loader2
   313
   314 				;aux1 = $02
   315 				;aux2 = aux1+1
   316 = 0230			drivenum =$230
   317 = 0231			drivecommand =$231
   318 = 0232			driveseclo =$232
   319 = 0233			drivesechi =$233
   320 = 023D			status1 = $23d
   321 = 0246			status2 = $246
   322 = 0100			buffer = $100
   323 CC00 AD 30 02			lda drivenum
   324 CC03 C9 34			cmp #$34	//Is virtual D4: drive?
   325 CC05 D0 69			jne drive1	//No! It's the character disk.
   326 				//	beq drive4
   327 				//	jmp $204e	// Use the disk drive!!!
   328 CC07			drive4	
   329 CC07 78				sei		// No IRQs!
   330 CC08 A9 00			lda #$00	
   331 CC0A 8D 0E D4			sta nmien	// No NMIs!
   332
   333 CC0D 38				sec		// Let's substract 1
   334 CC0E AD 32 02			lda driveseclo	// To the sector number!
   335 CC11 E9 01			sbc #$01
   336 CC13 8D 54 CC			sta d4_aux1	// Store it!
   337 CC16 AD 33 02			lda drivesechi	// Take MSB of the sector to read
   338 CC19 E9 00			sbc #$00	// Make sure we store it
   339 CC1B 8D 55 CC			sta d4_aux2	// on page zero!
   340 CC1E 18				clc		// Clear the carry.
   341 CC1F AD 54 CC			lda d4_aux1	// Take new sector number
   342 CC22 48				pha		// save it!
   343 					.if FLAG_16KB = 0
   344 CC23 29 C0				and #$c0	// Take bits 6 and 7
   345 					.else
   346 						and #$80	//In case of 16 kb banks just take bit 7
   347
   348 					.endif
   349 CC25 4A 4A 4A 4A 4A 4A		:6 lsr		// Move it to bit 0 and 1!
   350 					.if FLAG_16KB = 1
   351 						lsr	// Or bit 7 to 0 in case of 16kb banks
   352 					.endif
   353 CC2B 8D 54 CC			sta d4_aux1	// Store it!
   354 CC2E AD 55 CC			lda d4_aux2	// Take MSB of the sector.
   355 CC31 0A				asl		// Move 2 bits to the left! Bits 0 and 1 are zero 
   356 					.if FLAG_16KB = 0 //Or 1 bit if it's a Megacart
   357 CC32 0A					asl		// Done!
   358 					.endif
   359 CC33 0D 54 CC			ora d4_aux1	// Put bits 0 and 1 on from the previous calculation 
   360 CC36 18				clc		// Preparing to add 1
   361 = CC38			d4_parameter=*+1	// IMPORTANT: the parameter sets the initial side from the disk. Originally, 1
   362 CC37 69 01			adc #$01	// Add it!
   363 CC39 8D 4E CC			sta d4_c_bank	// Store cartridge bank!
   364 CC3C 68				pla		// take previous LSB of the sector number.
   365 					.if FLAG_16KB = 0
   366 CC3D 29 3F				and #$3F	// Take bits from 0 to 5. Bits 6 and 7 were previously taken to calculate the cartridge bank.
   367 					.else
   368 						and #$7f	// Take bits from 0 to 6. Bit 7 was previously taken to calculate the cartridge bank
   369 					.endif
   370 CC3F 4A				lsr		// Shift bit 0 to carry flag. That way, we'll know if the LSB to read on the cartridge is $00 or $80
   371 CC40 09 A0			ora #>start_cartridge	// Establish the initial address from the cartridge
   372 CC42 8D 55 CC			sta d4_aux2	// Store it as MSB from the address to read from the cartridge
   373 CC45 A9 00			lda #$00	// Taking carry
   374 CC47 6A				ror		// To determine if LSB is $00 or $80
   375 CC48 8D 54 CC			sta d4_aux1	// Save it!
   376 CC4B A0 7F			ldy #$7F	// Number of bytes to read from cartridge (128)
   377 CC4D			d4_ldacbank
   378 CC4D A9 FF			lda #$FF	// First, we take the cartridge bank calculated
   379 = CC4E			d4_c_bank = d4_ldacbank+1
   380 CC4F AA				tax		// Transfer to register X
   381 CC50 9D 00 D5			sta $d500,x	// And save to the cartridge control area. This way I can use Data bus or address bus bank-switching methods 
   382 CC53			d4_loop
   383 CC53 B9 FF FF			lda $FFFF,y	// Read the byte from the cartridge
   384 = CC54			d4_aux1 = d4_loop+1
   385 = CC55			d4_aux2 = d4_aux1+1
   386 CC56 99 00 01			sta buffer,y	// Store it to the final address
   387 CC59 88				dey		// Are we done with the byte copying?
   388 CC5A 10 F7			bpl d4_loop	// Not yet
   389 CC5C A9 FF			lda #$ff
   390 CC5E 8D FF D5			sta cart_apaga
   391 CC61 A9 C0			lda #$c0	// Ending the cartridge reading process. Now we recover the computer status
   392 CC63 8D 0E D4			sta nmien	// Recover NMIs
   393 CC66 58				cli		// Recover IRQs
   394 CC67 A0 01			ldy #$01	// All done without errors
   395 CC69 8C 3D 02			sty status1	// Save it to DSTATS!
   396 CC6C 8C 46 02			sty status2
   397 CC6F 60				rts		// BYE!!
   398
   399 CC70			drive1
   400 CC70 AD 31 02			lda drivecommand
   401 CC73 C9 21			cmp #$21	//Is it a format command?
   402 CC75 D0 27			jne no_format	//No! It's a write or read
   403
   404 				//Let's format it! Will erase all sectors for D1:
   405 CC77 A9 0A			lda #$0a
   406 CC79 20 E1 CD			jsr erasebk	//Erase bank $0a (Header info)
   407 CC7C A9 0B			lda #$0b
   408 CC7E 20 E1 CD			jsr erasebk	//Erase bank $0b (save state 1)
   409 CC81 A9 0C			lda #$0c
   410 CC83 20 E1 CD			jsr erasebk	//Erase bank $0c (save state 2)
   411 CC86 A9 0D			lda #$0d
   412 CC88 20 E1 CD			jsr erasebk	//Erase bank $0d (save state 3)
   413 CC8B A9 0E			lda #$0e
   414 CC8D 20 E1 CD			jsr erasebk	//Erase bank $0e (save state 4)
   415 CC90 A9 FF			lda #$ff
   416 CC92 8D FF D5			sta cart_apaga
   417 CC95 A0 01			ldy #$01	// All done without errors
   418 CC97 8C 3D 02			sty status1	// Save it to DSTATS!
   419 CC9A 8C 46 02			sty status2
   420 CC9D 60				rts		//Formatting successful
   421 CC9E			no_format
   422
   423
   424 				//	rts		//NEED TO BE REMOVED!!!!
   425
   426
   427 CC9E 48				pha		//Store command for a while
   428 				//Now will check if it's the initial sector from the block of the disk.
   429 				//In case it's the initial one, it erases the entire sector
   430 CC9F A2 00			ldx #$00	//Counter
   431 CCA1 8E 9E CD			stx sector_selected
   432 CCA4 A0 01			ldy #$01	//Start with no detection!!
   433 CCA6			d1_loop1
   434 CCA6 AD 33 02			lda drivesechi		//Take MSB of the sector
   435 CCA9 DD 79 CD			cmp sec_table+1,x	//Is it from the table?
   436 CCAC F0 04			beq d1_loop1_0 
   437 CCAE 90 12			bcc d1_loop2		//NO! It's higher. Don't count this.
   438 CCB0 D0 0D			bne d1_loop1_2		//No! It's lower. Take x to the sector selected.
   439
   440 CCB2			d1_loop1_0
   441 CCB2 AD 32 02			lda driveseclo		//It's equal. Now let's get LSB of the sector.
   442 CCB5 DD 78 CD			cmp sec_table,x		//Is it from the table?
   443 CCB8 F0 04			beq d1_loop1_1
   444 CCBA 90 06			bcc d1_loop2		//No, it's higher. next sector!
   445 CCBC D0 01			bne d1_loop1_2		//No, it's lower. Take x to the sector selected.
   446 CCBE			d1_loop1_1
   447 CCBE 88				dey			//It's the same! Put Y = 0.
   448 CCBF			d1_loop1_2
   449 CCBF 8E 9E CD			stx sector_selected
   450 CCC2			d1_loop2
   451 CCC2 E8				inx
   452 CCC3 E8				inx
   453 CCC4 E0 0A			cpx #$0a	//All 5 sectors checked?
   454 CCC6 D0 DE			bne d1_loop1	//Not yet!
   455 CCC8 AE 9E CD			ldx sector_selected
   456 CCCB BD 82 CD			lda offset_table,x	//Take the offset
   457 CCCE 8D 8C CD			sta sec_offset		//Store it!
   458 CCD1 BD 83 CD			lda offset_table+1,x	//MSB offset
   459 CCD4 8D 8D CD			sta sec_offset+1	//Store it!
   460 CCD7 4E 9E CD			lsr sector_selected
   461 CCDA AE 9E CD			ldx sector_selected
   462 CCDD BD 98 CD			lda bank_table,x
   463 CCE0 8D 16 CD			sta d1_parameter	//Change initial bank to take
   464
   465 CCE3			drive1_put
   466 CCE3 78				sei		// No IRQs!
   467 CCE4 A9 00			lda #$00	
   468 CCE6 8D 0E D4			sta nmien	// No NMIs!
   469
   470 CCE9 38				sec		// Let's substract 1
   471 CCEA AD 32 02			lda driveseclo	// To the sector number!
   472 CCED ED 8C CD			sbc sec_offset
   473 CCF0 8D 40 CD			sta d1_read_aux1	// Store it!
   474 CCF3 AD 33 02			lda drivesechi	// Take MSB of the sector to read
   475 CCF6 ED 8D CD			sbc sec_offset+1	// Make sure we store it
   476 CCF9 8D 41 CD			sta d1_read_aux2	// on page zero!
   477 CCFC 18				clc		// Clear the carry.
   478 CCFD AD 40 CD			lda d1_read_aux1	// Take new sector number
   479 CD00 48				pha		// save it!
   480 CD01 29 C0			and #$c0	// Take bits 6 and 7
   481 CD03 4A 4A 4A 4A 4A 4A		:6 lsr		// Move it to bit 0 and 1!
   482 CD09 8D 40 CD			sta d1_read_aux1	// Store it!
   483 CD0C AD 41 CD			lda d1_read_aux2	// Take MSB of the sector.
   484 CD0F 0A				asl		// Move 2 bits to the left! Bits 0 and 1 are zero 
   485 CD10 0A				asl		// Done!
   486 CD11 0D 40 CD			ora d1_read_aux1	// Put bits 0 and 1 on from the previous calculation 
   487 CD14 18				clc		// Preparing to add 1
   488 = CD16			d1_parameter=*+1	// IMPORTANT: the parameter sets the initial side from the disk. Originally, 1
   489 CD15 69 01			adc #$01	// Add it!
   490 CD17 8D 3A CD			sta d1_read_c_bank	// Store cartridge bank!
   491 CD1A 8D 57 CD			sta d1_write_c_bank
   492 CD1D 68				pla		// take previous LSB of the sector number.
   493 CD1E 29 3F			and #$3F	// Take bits from 0 to 5. Bits 6 and 7 were previously taken to calculate the cartridge bank.
   494 CD20 4A				lsr		// Shift bit 0 to carry flag. That way, we'll know if the LSB to read on the cartridge is $00 or $80
   495 CD21 09 A0			ora #>start_cartridge	// Establish the initial address from the cartridge
   496 CD23 8D 41 CD			sta d1_read_aux2	// Store it as MSB from the address to read from the cartridge
   497 CD26 8D 60 CD			sta d1_write_aux2
   498 CD29 A9 00			lda #$00	// Taking carry
   499 CD2B 6A				ror		// To determine if LSB is $00 or $80
   500 CD2C 8D 40 CD			sta d1_read_aux1	// Save it!
   501 CD2F 8D 5F CD			sta d1_write_aux1
   502
   503 				//Now we start to copy the bytes (read/write)
   504
   505 CD32 A2 7F			ldx #$7f
   506 CD34 68				pla		//Restore command
   507 CD35 C9 57			cmp #$57	//Write?
   508 CD37 F0 11			beq d1_write
   509 CD39			d1_read_ldacbank
   510 CD39 A9 FF			lda #$ff
   511 = CD3A			d1_read_c_bank =d1_read_ldacbank+1
   512 CD3B A8				tay
   513 CD3C 99 00 D5			sta $d500,y
   514 CD3F			d1_read_loop
   515 CD3F BD FF FF			lda $FFFF,x	// Read the byte from the cartridge
   516 = CD40			d1_read_aux1 = d1_read_loop+1
   517 = CD41			d1_read_aux2 = d1_read_aux1+1
   518 CD42 9D 00 01			sta buffer,x	// Store it to the final address
   519 CD45 CA				dex		// Are we done with the byte copying?
   520 CD46 10 F7			bpl d1_read_loop	// Not yet
   521 CD48 30 1A			bmi d1_end	//Let's finish
   522
   523 CD4A			d1_write
   524 CD4A 98				tya		//Is is first sector?
   525 CD4B D0 09			bne d1_write_cont	//Nope, let's continue
   526 CD4D AD 9E CD			lda sector_selected	
   527 CD50 18				clc
   528 CD51 69 0A			adc #$0a
   529 CD53 20 E1 CD			jsr erasebk		//Erase the bank and start writing!
   530 CD56			d1_write_cont
   531
   532 CD56			d1_write_loop
   533 CD56			d1_write_ldacbank
   534 CD56 A9 FF			lda #$ff
   535 = CD57			d1_write_c_bank =d1_write_ldacbank+1
   536 CD58 20 C0 CD			jsr enable_write
   537 CD5B BD 00 01			lda buffer,x
   538 CD5E			d1_write_sta	
   539 CD5E 9D FF FF			sta $FFFF,x
   540 = CD5F			d1_write_aux1 = d1_write_sta+1
   541 = CD60			d1_write_aux2 = d1_write_aux1+1
   542 CD61 CA				dex
   543 CD62 10 F2			bpl d1_write_loop
   544
   545 CD64			d1_end
   546 CD64 A9 FF			lda #$ff
   547 CD66 8D FF D5			sta cart_apaga
   548 CD69 A9 C0			lda #$c0	// Ending the cartridge reading process. Now we recover the computer status
   549 CD6B 8D 0E D4			sta nmien	// Recover NMIs
   550 CD6E 58				cli		// Recover IRQs
   551 CD6F A0 01			ldy #$01	// All done without errors
   552 CD71 8C 3D 02			sty status1	// Save it to DSTATS!
   553 CD74 8C 46 02			sty status2
   554 CD77 60				rts		// BYE!!
   555
   556
   557 CD78			sec_table		//List of initial sectors to write on 
   558
   559 				//This table marks the sectors we'll take into account to erase the entire sector.
   560 				//That is, the initial disk sector from we'll erase.
   561 CD78 02 00 03 00 BB 00 + 	.word $0002,$0003,$00bb,$0173,$022b
   562 CD82			offset_table
   563 CD82 01 00 03 00 BB 00 + 	.word $0001,$0003,$00bb,$0173,$022b
   564 CD8C			sec_offset
   565 CD8C 00 00			.word $0000	//Sector offset to substract from original cartridge sector.
   566 				//bank_table		//List of initial bank per sector. The first 10 sectors are for D4:. Banks $0a-$0f to D1:
   567 CD8E 00 00 00 00 00 00 + 	.by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   568 CD98			bank_table
   569 CD98 50 58 60 68 70 78		.by $50,$58,$60,$68,$70,$78
   570 CD9E			sector_selected
   571 CD9E 00				.by $00		//By default, sector 0
   572 CD9F			bank_selected
   573 CD9F 00				.by $00		//By default, bank 0
   574
   575 				//Code for managing the Atarimax flash cartridge. Please take note that this routine
   576 				//is implemented just for the second chip.
   577 				//To add functionality to the first chip, you must change the wr5555, wr2aaa and add a chip mask routine.
   578
   579
   580 CDA0			fcode
   581 CDA0			setsec
   582 CDA0 29 0F			and #$0F	//Only $00-$0F allowed
   583 CDA2 18				clc		//Just to not set bit 7 to 1 accidentally
   584 CDA3 2A				rol		//*2
   585 CDA4 2A				rol		//*4
   586 CDA5 2A				rol		//*8
   587 CDA6 AA				tax
   588 CDA7 9D 00 D5			sta $d500,x	//Change bank!
   589 CDAA 60				rts
   590
   591 CDAB			wr5555
   592 CDAB 8D 42 D5			sta $d542	//Setting third bank from second chip.
   593 CDAE 8D 55 B5			sta $b555	//Store on $5555!
   594 CDB1 60				rts
   595
   596 CDB2			cmd_unlock
   597 CDB2 A9 AA			lda #$AA	//Store $aa on $5555
   598 CDB4 20 AB CD			jsr wr5555	//Do it!
   599 CDB7 A9 55			lda #$55	//Store $55 on $2aaa
   600
   601 CDB9			wr2AAA
   602 CDB9 8D 41 D5			sta $d541	//Setting second bank from second chip.
   603 CDBC 8D AA AA			sta $aaaa	//Store on $2aaa
   604 CDBF 60				rts
   605
   606
   607 				//Enable_write:
   608 				//enables the 29F040 chip to write one byte.
   609 				//It only enables one byte. You have to call this routine for every byte you want to write.
   610 CDC0			enable_write
   611 CDC0 8E 1F CE			stx temp_x
   612 CDC3 48				pha
   613 CDC4 20 B2 CD			jsr cmd_unlock	//First and second cycle
   614 CDC7 A9 A0			lda #$a0
   615 CDC9 20 AB CD			jsr wr5555	//Third cycle
   616 CDCC			enable_write_cont
   617 CDCC 68				pla
   618 CDCD AA				tax
   619 CDCE 9D 00 D5			sta $d500,x
   620 CDD1 AE 1F CE			ldx temp_x
   621 CDD4 60				rts
   622
   623 				//Enable read: not needed for now. Just to have it.
   624 CDD5			enable_read
   625 CDD5 48				pha
   626 CDD6 20 B2 CD			jsr cmd_unlock
   627 CDD9 A9 F0			lda #$f0
   628 CDDB 20 AB CD			jsr wr5555
   629 CDDE 4C CC CD			jmp enable_write_cont
   630 CDE1			erasebk
   631 CDE1 8E 1F CE			stx temp_x
   632 CDE4 48				pha
   633 CDE5 20 B2 CD			jsr cmd_unlock		//First two cycles!
   634 CDE8 A9 80			lda #$80
   635 CDEA 20 AB CD			jsr wr5555		//Third cycle!
   636 CDED 20 B2 CD			jsr cmd_unlock		//Fourth and fifth cycles!
   637 CDF0 68				pla
   638 CDF1 20 A0 CD			jsr setsec
   639 CDF4 A9 30			lda #$30		//Sixth and final cycle!
   640 CDF6 8D 00 A0			sta start_cartridge	//Erase!
   641 					
   642 				//Poll_write: wait until the erase is finished.
   643 CDF9			poll_write
   644 CDF9 A9 00			lda #$00
   645 CDFB 8D 1E CE			sta pollsame
   646 CDFE			@poll_again
   647 CDFE AD 00 A0			lda start_cartridge
   648 CE01 CD 00 A0			cmp start_cartridge
   649 CE04 D0 F3			bne poll_write
   650 CE06 CD 00 A0			cmp start_cartridge
   651 CE09 D0 EE			bne poll_write
   652 CE0B CD 00 A0			cmp start_cartridge
   653 CE0E D0 E9			bne poll_write
   654 CE10 EE 1E CE			inc pollsame
   655 CE13 D0 E9			bne @poll_again
   656 CE15 A9 FF			lda #$ff
   657 CE17 8D FF D5			sta cart_apaga
   658 CE1A AE 1F CE			ldx temp_x
   659 CE1D 60				rts
   660 CE1E			pollsame
   661 CE1E 00				.by $00
   662 CE1F 00			temp_x	.by $00
   663 					
   664 				//	icl "fcode.s"	//Courtesy from Wrathchild at Atariage. Thanks!
   665
   666 CE20			chipmask
   667 CE20 00				.byte $00
   668 CE21			final_greeting
   669 CE21 23 61 72 74 72 69 + 	.sb "Cartridge version (C) 2020 by Guillermo Fuenzalida"
   670 CE53			fin_loader
   671 				.endp
   672
   673 					opt f+		//start filling!
   674 					
   675 A531				org end_bank-6-3	//// Put it into the end
   676 BFF7 4C 00 A0			jmp init
   677 BFFA 3D A0			.word init1		// Second init address first.
   678 BFFC 00 04			.byte $00,$04		// Parameters to not to call to Disk.
   679 BFFE 00 A0			.word init		// First init address
   680 					opt f-			// No more filling!
   681
   682 				// Bank 2
   683 C000				org start_cartridge
   684 01,A000				lmb #$01
   685 01,A000			start_atr
   686 01,A000 01 01 00 06 06 + 	ins "ARD_WIP_rel3.atr",16
   687 01,09A000		end_atr
   688
   689 				//Now we fill till we got cartridge size
   690
   691 = 01,090000		total_bytes	= end_atr - start_atr		//Total bytes of ATR
   692 = 01,2000		bank_size	= end_bank - start_cartridge
   693
   694 = 01,0049		banks_used = ((total_bytes+(bank_size-1))/bank_size)+1
   695 = 01,0037		filler_banks = cart_banks - banks_used
   696 = 01,0000		filler_bytes = bank_size*(banks_used-1)-total_bytes
   697
   698 				; Llenamos los bytes
   699
   700 				.if filler_banks > 0
   701 01,09A000			.sav filler_bytes
   702 				.else
   703 					.sav filler_bytes - 6 -8
   704 				.endif
   705
   706 01,09A000		end_file
   707
   708
   709 				.if filler_banks > 0
   710 					.if filler_banks > 1
   711 						.rept filler_banks-1
   712 							.SAV BANK_SIZE
   713 						.ENDR
   713 						.endr
Source: REPT
   712 01,09A000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,09C000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,09E000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0A0000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0A2000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0A4000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0A6000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0A8000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0AA000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0AC000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0AE000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0B0000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0B2000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0B4000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0B6000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0B8000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0BA000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0BC000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0BE000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0C0000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0C2000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0C4000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0C6000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0C8000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0CA000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0CC000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0CE000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0D0000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0D2000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0D4000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0D6000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0D8000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0DA000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0DC000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0DE000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0E0000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0E2000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0E4000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0E6000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0E8000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0EA000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0EC000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0EE000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0F0000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0F2000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0F4000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0F6000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0F8000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0FA000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0FC000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,0FE000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,100000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,102000 00 00 00 00 +  			.SAV BANK_SIZE
   712 01,104000 00 00 00 00 +  			.SAV BANK_SIZE
Source: C:\Users\admin\OneDrive\Guille\Eclipse\workplace\WUDSN\GitHub\ARDungeonCartridge\BOOTCartridge\Alternate Reality - The dungeon\Ardungeon.asm
   714 					.endif
   715 01,106000 00 00 00 00 +  	.sav bank_size-6-8
   716 				.endif
   717
   718
   719 01,107FF2 A9 00			lda #$00
   720 01,107FF4 8D 00 D5		sta $d500
   721 01,107FF7 4C 00 A0		jmp init
   722 01,107FFA 3D A0			.word init1
   723 01,107FFC 00 04			.byte $00,$04
   724 01,107FFE F2 BF			.word $bff2
